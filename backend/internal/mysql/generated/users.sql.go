// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package generated

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users
    (email, password, subscription, role, refresh_token, updated_by)
VALUES
    (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Email        string        `json:"email"`
	Password     string        `json:"password"`
	Subscription bool          `json:"subscription"`
	Role         string        `json:"role"`
	RefreshToken string        `json:"refresh_token"`
	UpdatedBy    sql.NullInt32 `json:"updated_by"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Subscription,
		arg.Role,
		arg.RefreshToken,
		arg.UpdatedBy,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getSubscribedUsers = `-- name: GetSubscribedUsers :many
SELECT id, email, password, subscription, role, refresh_token, updated_by, updated_at, created_at FROM users
WHERE subscription = true
ORDER BY email
`

func (q *Queries) GetSubscribedUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getSubscribedUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Subscription,
			&i.Role,
			&i.RefreshToken,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, subscription, role, refresh_token, updated_by, updated_at, created_at FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Subscription,
		&i.Role,
		&i.RefreshToken,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, subscription, role, refresh_token, updated_by, updated_at, created_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uint32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Subscription,
		&i.Role,
		&i.RefreshToken,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserEmail = `-- name: GetUserEmail :one
SELECT email FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserEmail(ctx context.Context, id uint32) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserEmail, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, subscription, role, refresh_token, updated_by, updated_at, created_at FROM users
ORDER BY email
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Subscription,
			&i.Role,
			&i.RefreshToken,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE users
  set refresh_token = ?
WHERE id = ?
`

type UpdateRefreshTokenParams struct {
	RefreshToken string `json:"refresh_token"`
	ID           uint32 `json:"id"`
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateRefreshToken, arg.RefreshToken, arg.ID)
	return err
}

const updateSubscriptionStatus = `-- name: UpdateSubscriptionStatus :exec
UPDATE users
  set subscription = ?,
  updated_at = CURRENT_TIMESTAMP,
  updated_by = ?
WHERE id = ?
`

type UpdateSubscriptionStatusParams struct {
	Subscription bool          `json:"subscription"`
	UpdatedBy    sql.NullInt32 `json:"updated_by"`
	ID           uint32        `json:"id"`
}

func (q *Queries) UpdateSubscriptionStatus(ctx context.Context, arg UpdateSubscriptionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSubscriptionStatus, arg.Subscription, arg.UpdatedBy, arg.ID)
	return err
}

const updateUserCredentials = `-- name: UpdateUserCredentials :exec
UPDATE users
  set password = ?,
  updated_at = CURRENT_TIMESTAMP,
  updated_by = ?
WHERE id = ?
`

type UpdateUserCredentialsParams struct {
	Password  string        `json:"password"`
	UpdatedBy sql.NullInt32 `json:"updated_by"`
	ID        uint32        `json:"id"`
}

func (q *Queries) UpdateUserCredentials(ctx context.Context, arg UpdateUserCredentialsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserCredentials, arg.Password, arg.UpdatedBy, arg.ID)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE users
  set role = ?,
  updated_at = CURRENT_TIMESTAMP,
  updated_by = ?
WHERE id = ?
`

type UpdateUserRoleParams struct {
	Role      string        `json:"role"`
	UpdatedBy sql.NullInt32 `json:"updated_by"`
	ID        uint32        `json:"id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateUserRole, arg.Role, arg.UpdatedBy, arg.ID)
	return err
}
