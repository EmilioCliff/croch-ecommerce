// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reviews.sql

package generated

import (
	"context"
	"database/sql"
)

const createReview = `-- name: CreateReview :execresult
INSERT INTO reviews (
  user_id, product_id, rating, review
) VALUES (
  ?, ?, ?, ?
)
`

type CreateReviewParams struct {
	UserID    uint32 `json:"user_id"`
	ProductID uint32 `json:"product_id"`
	Rating    uint32 `json:"rating"`
	Review    string `json:"review"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createReview,
		arg.UserID,
		arg.ProductID,
		arg.Rating,
		arg.Review,
	)
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = ?
`

func (q *Queries) DeleteReview(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const getReview = `-- name: GetReview :one
SELECT id, user_id, product_id, rating, review, created_at FROM reviews
WHERE id = ? LIMIT 1
`

func (q *Queries) GetReview(ctx context.Context, id uint32) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Rating,
		&i.Review,
		&i.CreatedAt,
	)
	return i, err
}

const listProductsReviews = `-- name: ListProductsReviews :many
SELECT id, user_id, product_id, rating, review, created_at FROM reviews
WHERE product_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListProductsReviews(ctx context.Context, productID uint32) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listProductsReviews, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Rating,
			&i.Review,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReviews = `-- name: ListReviews :many
SELECT id, user_id, product_id, rating, review, created_at FROM reviews
ORDER BY created_at DESC
`

func (q *Queries) ListReviews(ctx context.Context) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listReviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Rating,
			&i.Review,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersReviews = `-- name: ListUsersReviews :many
SELECT id, user_id, product_id, rating, review, created_at FROM reviews
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListUsersReviews(ctx context.Context, userID uint32) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listUsersReviews, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Rating,
			&i.Review,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
