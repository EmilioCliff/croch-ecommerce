// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package generated

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO products (
  id, name, description, regular_price, discounted_price, quantity, category_id, size_option, color_option, seasonal, featured, img_urls, updated_by
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateProductParams struct {
	ID              string          `json:"id"`
	Name            string          `json:"name"`
	Description     string          `json:"description"`
	RegularPrice    string          `json:"regular_price"`
	DiscountedPrice string          `json:"discounted_price"`
	Quantity        int32           `json:"quantity"`
	CategoryID      sql.NullInt32   `json:"category_id"`
	SizeOption      json.RawMessage `json:"size_option"`
	ColorOption     json.RawMessage `json:"color_option"`
	Seasonal        bool            `json:"seasonal"`
	Featured        bool            `json:"featured"`
	ImgUrls         json.RawMessage `json:"img_urls"`
	UpdatedBy       string          `json:"updated_by"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.RegularPrice,
		arg.DiscountedPrice,
		arg.Quantity,
		arg.CategoryID,
		arg.SizeOption,
		arg.ColorOption,
		arg.Seasonal,
		arg.Featured,
		arg.ImgUrls,
		arg.UpdatedBy,
	)
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, regular_price, discounted_price, quantity, category_id, size_option, color_option, rating, seasonal, featured, img_urls, updated_by, updated_at, created_at FROM products
WHERE id = ? LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.RegularPrice,
		&i.DiscountedPrice,
		&i.Quantity,
		&i.CategoryID,
		&i.SizeOption,
		&i.ColorOption,
		&i.Rating,
		&i.Seasonal,
		&i.Featured,
		&i.ImgUrls,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listDiscountedProducts = `-- name: ListDiscountedProducts :many
SELECT id, name, description, regular_price, discounted_price, quantity, category_id, size_option, color_option, rating, seasonal, featured, img_urls, updated_by, updated_at, created_at FROM products
WHERE discounted_price > 0
ORDER BY name
`

func (q *Queries) ListDiscountedProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listDiscountedProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.RegularPrice,
			&i.DiscountedPrice,
			&i.Quantity,
			&i.CategoryID,
			&i.SizeOption,
			&i.ColorOption,
			&i.Rating,
			&i.Seasonal,
			&i.Featured,
			&i.ImgUrls,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeaturedProducts = `-- name: ListFeaturedProducts :many
SELECT id, name, description, regular_price, discounted_price, quantity, category_id, size_option, color_option, rating, seasonal, featured, img_urls, updated_by, updated_at, created_at FROM products
WHERE featured = TRUE
ORDER BY name
`

func (q *Queries) ListFeaturedProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listFeaturedProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.RegularPrice,
			&i.DiscountedPrice,
			&i.Quantity,
			&i.CategoryID,
			&i.SizeOption,
			&i.ColorOption,
			&i.Rating,
			&i.Seasonal,
			&i.Featured,
			&i.ImgUrls,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, regular_price, discounted_price, quantity, category_id, size_option, color_option, rating, seasonal, featured, img_urls, updated_by, updated_at, created_at FROM products
ORDER BY name
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.RegularPrice,
			&i.DiscountedPrice,
			&i.Quantity,
			&i.CategoryID,
			&i.SizeOption,
			&i.ColorOption,
			&i.Rating,
			&i.Seasonal,
			&i.Featured,
			&i.ImgUrls,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategory = `-- name: ListProductsByCategory :many
SELECT id, name, description, regular_price, discounted_price, quantity, category_id, size_option, color_option, rating, seasonal, featured, img_urls, updated_by, updated_at, created_at FROM products
WHERE category_id = ?
ORDER BY name
`

func (q *Queries) ListProductsByCategory(ctx context.Context, categoryID sql.NullInt32) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.RegularPrice,
			&i.DiscountedPrice,
			&i.Quantity,
			&i.CategoryID,
			&i.SizeOption,
			&i.ColorOption,
			&i.Rating,
			&i.Seasonal,
			&i.Featured,
			&i.ImgUrls,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSeasonalProducts = `-- name: ListSeasonalProducts :many
SELECT id, name, description, regular_price, discounted_price, quantity, category_id, size_option, color_option, rating, seasonal, featured, img_urls, updated_by, updated_at, created_at FROM products
WHERE seasonal = TRUE
ORDER BY name
`

func (q *Queries) ListSeasonalProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listSeasonalProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.RegularPrice,
			&i.DiscountedPrice,
			&i.Quantity,
			&i.CategoryID,
			&i.SizeOption,
			&i.ColorOption,
			&i.Rating,
			&i.Seasonal,
			&i.Featured,
			&i.ImgUrls,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
  set name = ?,
  description = ?,
  regular_price = ?,
  discounted_price = ?,
  quantity = ?,
  category_id = ?,
  size_option = ?,
  color_option = ?,
  seasonal =  ?,
  featured =  ?,
  img_urls =  ?,
  updated_by = ?,
  updated_at = ?
WHERE id = ?
`

type UpdateProductParams struct {
	Name            string          `json:"name"`
	Description     string          `json:"description"`
	RegularPrice    string          `json:"regular_price"`
	DiscountedPrice string          `json:"discounted_price"`
	Quantity        int32           `json:"quantity"`
	CategoryID      sql.NullInt32   `json:"category_id"`
	SizeOption      json.RawMessage `json:"size_option"`
	ColorOption     json.RawMessage `json:"color_option"`
	Seasonal        bool            `json:"seasonal"`
	Featured        bool            `json:"featured"`
	ImgUrls         json.RawMessage `json:"img_urls"`
	UpdatedBy       string          `json:"updated_by"`
	UpdatedAt       time.Time       `json:"updated_at"`
	ID              string          `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.RegularPrice,
		arg.DiscountedPrice,
		arg.Quantity,
		arg.CategoryID,
		arg.SizeOption,
		arg.ColorOption,
		arg.Seasonal,
		arg.Featured,
		arg.ImgUrls,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
