// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const checkUsersCartExists = `-- name: CheckUsersCartExists :one
SELECT user_id, product_id, quantity, created_at FROM cart
WHERE user_id = ? AND product_id = ?
LIMIT 1
`

type CheckUsersCartExistsParams struct {
	UserID    uint32 `json:"user_id"`
	ProductID uint32 `json:"product_id"`
}

func (q *Queries) CheckUsersCartExists(ctx context.Context, arg CheckUsersCartExistsParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, checkUsersCartExists, arg.UserID, arg.ProductID)
	var i Cart
	err := row.Scan(
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const createCart = `-- name: CreateCart :execresult
INSERT INTO cart (
  user_id, product_id, quantity
) VALUES (
  ?, ?, ?
)
`

type CreateCartParams struct {
	UserID    uint32 `json:"user_id"`
	ProductID uint32 `json:"product_id"`
	Quantity  uint32 `json:"quantity"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCart, arg.UserID, arg.ProductID, arg.Quantity)
}

const deleteUserCart = `-- name: DeleteUserCart :exec
DELETE FROM cart
WHERE user_id = ?
`

func (q *Queries) DeleteUserCart(ctx context.Context, userID uint32) error {
	_, err := q.db.ExecContext(ctx, deleteUserCart, userID)
	return err
}

const listCart = `-- name: ListCart :many
SELECT user_id, product_id, quantity, created_at FROM cart
ORDER BY created_at DESC
`

func (q *Queries) ListCart(ctx context.Context) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, listCart)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCartByUser = `-- name: ListCartByUser :many
SELECT 
  user_id,
  GROUP_CONCAT(
    CONCAT('Product ID: ', product_id, ', Quantity: ', quantity, ', Created At: ', created_at) 
    ORDER BY created_at DESC
    SEPARATOR ' | '
  ) AS cart_items
FROM 
  cart
GROUP BY 
  user_id
ORDER BY 
  MAX(created_at) DESC
`

type ListCartByUserRow struct {
	UserID    uint32         `json:"user_id"`
	CartItems sql.NullString `json:"cart_items"`
}

func (q *Queries) ListCartByUser(ctx context.Context) ([]ListCartByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listCartByUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCartByUserRow
	for rows.Next() {
		var i ListCartByUserRow
		if err := rows.Scan(&i.UserID, &i.CartItems); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOldCarts = `-- name: ListOldCarts :many
SELECT user_id, product_id, quantity, created_at FROM cart
WHERE created_at = ? > date_sub(now(), interval 2 week)
ORDER BY created_at ASC
`

func (q *Queries) ListOldCarts(ctx context.Context, createdAt time.Time) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, listOldCarts, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductInCarts = `-- name: ListProductInCarts :many
SELECT user_id, product_id, quantity, created_at FROM cart
WHERE product_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListProductInCarts(ctx context.Context, productID uint32) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, listProductInCarts, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserCarts = `-- name: ListUserCarts :many
SELECT user_id, product_id, quantity, created_at FROM cart
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListUserCarts(ctx context.Context, userID uint32) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, listUserCarts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserCart = `-- name: UpdateUserCart :exec
UPDATE cart
  set quantity = ?
WHERE user_id = ? AND product_id = ?
`

type UpdateUserCartParams struct {
	Quantity  uint32 `json:"quantity"`
	UserID    uint32 `json:"user_id"`
	ProductID uint32 `json:"product_id"`
}

func (q *Queries) UpdateUserCart(ctx context.Context, arg UpdateUserCartParams) error {
	_, err := q.db.ExecContext(ctx, updateUserCart, arg.Quantity, arg.UserID, arg.ProductID)
	return err
}
