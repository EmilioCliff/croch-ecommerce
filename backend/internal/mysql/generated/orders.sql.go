// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :execresult
INSERT INTO orders (
  id, user_id, amount, shipping_address, shipping_amount
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateOrderParams struct {
	ID              string `json:"id"`
	UserID          string `json:"user_id"`
	Amount          string `json:"amount"`
	ShippingAddress string `json:"shipping_address"`
	ShippingAmount  string `json:"shipping_amount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.ShippingAddress,
		arg.ShippingAmount,
	)
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = ?
`

func (q *Queries) DeleteOrder(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, amount, shipping_amount, status, shipping_address, updated_by, updated_at, created_at FROM orders
WHERE id = ?
`

func (q *Queries) GetOrder(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.ShippingAmount,
		&i.Status,
		&i.ShippingAddress,
		&i.UpdatedBy,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderWithStatus = `-- name: ListOrderWithStatus :many
SELECT id, user_id, amount, shipping_amount, status, shipping_address, updated_by, updated_at, created_at FROM orders
WHERE status = ?
ORDER BY created_at DESC
`

func (q *Queries) ListOrderWithStatus(ctx context.Context, status string) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrderWithStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.ShippingAmount,
			&i.Status,
			&i.ShippingAddress,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, amount, shipping_amount, status, shipping_address, updated_by, updated_at, created_at FROM orders
ORDER BY created_at DESC
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.ShippingAmount,
			&i.Status,
			&i.ShippingAddress,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserOrders = `-- name: ListUserOrders :many
SELECT id, user_id, amount, shipping_amount, status, shipping_address, updated_by, updated_at, created_at FROM orders
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListUserOrders(ctx context.Context, userID string) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listUserOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.ShippingAmount,
			&i.Status,
			&i.ShippingAddress,
			&i.UpdatedBy,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
  set status = ?,
  updated_by = ?,
  updated_at = ?
WHERE id = ?
`

type UpdateOrderStatusParams struct {
	Status    string    `json:"status"`
	UpdatedBy string    `json:"updated_by"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        string    `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus,
		arg.Status,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
