// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blogs.sql

package generated

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createBlog = `-- name: CreateBlog :execresult
INSERT INTO blogs (
  author, title, content, img_urls
) VALUES (
  ?, ?, ?, ?
)
`

type CreateBlogParams struct {
	Author  string          `json:"author"`
	Title   string          `json:"title"`
	Content string          `json:"content"`
	ImgUrls json.RawMessage `json:"img_urls"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBlog,
		arg.Author,
		arg.Title,
		arg.Content,
		arg.ImgUrls,
	)
}

const deleteBlog = `-- name: DeleteBlog :exec
DELETE FROM blogs
WHERE id = ?
`

func (q *Queries) DeleteBlog(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteBlog, id)
	return err
}

const getBlog = `-- name: GetBlog :one
SELECT id, author, title, content, img_urls, created_at FROM blogs
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBlog(ctx context.Context, id uint32) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlog, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Title,
		&i.Content,
		&i.ImgUrls,
		&i.CreatedAt,
	)
	return i, err
}

const getBlogsByAuthor = `-- name: GetBlogsByAuthor :many
SELECT id, author, title, content, img_urls, created_at FROM blogs
WHERE author = ? LIMIT 1
`

func (q *Queries) GetBlogsByAuthor(ctx context.Context, author string) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, getBlogsByAuthor, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Title,
			&i.Content,
			&i.ImgUrls,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBlogs = `-- name: ListBlogs :many
SELECT id, author, title, content, img_urls, created_at FROM blogs
ORDER BY created_at DESC
`

func (q *Queries) ListBlogs(ctx context.Context) ([]Blog, error) {
	rows, err := q.db.QueryContext(ctx, listBlogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Title,
			&i.Content,
			&i.ImgUrls,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlog = `-- name: UpdateBlog :exec
UPDATE blogs
  set title = coalesce(?, name),
  content = coalesce(?, content),
  img_urls = coalesce(?, img_urls)
WHERE id = ?
`

type UpdateBlogParams struct {
	Title   sql.NullString  `json:"title"`
	Content sql.NullString  `json:"content"`
	ImgUrls json.RawMessage `json:"img_urls"`
	ID      uint32          `json:"id"`
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) error {
	_, err := q.db.ExecContext(ctx, updateBlog,
		arg.Title,
		arg.Content,
		arg.ImgUrls,
		arg.ID,
	)
	return err
}
